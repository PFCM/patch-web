<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>ValueError: need at least one array to stack // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 139952176313680,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "XmYdQBQ8Y2wrMyNHxnjn";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>builtins.ValueError</h1>
<div class="detail">
  <p class="errormsg">ValueError: need at least one array to stack</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-139952176313736">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1997</em>,
      in <code class="function">__call__</code></h4>
  <div class="source"><pre class="line before"><span class="ws">                </span>error = None</pre>
<pre class="line before"><span class="ws">            </span>ctx.auto_pop(error)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Shortcut for :attr:`wsgi_app`.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return '&lt;%s %r&gt;' % (</pre>
<pre class="line after"><span class="ws">            </span>self.__class__.__name__,</pre>
<pre class="line after"><span class="ws">            </span>self.name,</pre></div>
</div>

<li><div class="frame" id="frame-139952176314072">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1985</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-139952176314128">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1540</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>if handler is None:</pre></div>
</div>

<li><div class="frame" id="frame-139952176314184">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/_compat.py"</cite>,
      line <em class="line">33</em>,
      in <code class="function">reraise</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>from io import StringIO</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>text_type = unicode</pre></div>
</div>

<li><div class="frame" id="frame-139952176313792">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1982</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>ctx.push()</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-139952176314296">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1614</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-139952176314352">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1517</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Default exception handling that kicks in when an exception</pre>
<pre class="line after"><span class="ws">        </span>occurs that is not caught.  In debug mode the exception will</pre></div>
</div>

<li><div class="frame" id="frame-139952176314408">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/_compat.py"</cite>,
      line <em class="line">33</em>,
      in <code class="function">reraise</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>from io import StringIO</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>text_type = unicode</pre></div>
</div>

<li><div class="frame" id="frame-139952176313904">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1612</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-139952176314520">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py"</cite>,
      line <em class="line">1598</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span># request came with the OPTIONS method, reply automatically</pre>
<pre class="line before"><span class="ws">        </span>if getattr(rule, 'provide_automatic_options', False) \</pre>
<pre class="line before"><span class="ws">           </span>and req.method == 'OPTIONS':</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-139952176314576">
  <h4>File <cite class="filename">"/home/pfcm/repos/patch-web/patchserver/main.py"</cite>,
      line <em class="line">75</em>,
      in <code class="function">process</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>return</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>app.logger.info('received image %dx%d', img.shape[0], img.shape[1])</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>patch_size = 32  # will come from post params</pre>
<pre class="line current"><span class="ws">    </span>img = catsup(img, patch_size)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>_, img = cv2.imencode('.' + request.files['data'].filename.split('.')[-1],</pre>
<pre class="line after"><span class="ws">                          </span>img)</pre>
<pre class="line after"><span class="ws">    </span>img = io.BytesIO(img)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139952176313400">
  <h4>File <cite class="filename">"/home/pfcm/repos/patch-web/patchserver/main.py"</cite>,
      line <em class="line">50</em>,
      in <code class="function">catsup</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>loader = partial(cats, app.config['cats_path'], patch_size)</pre>
<pre class="line before"><span class="ws">    </span>with img_index(</pre>
<pre class="line before"><span class="ws">            </span>index_path,</pre>
<pre class="line before"><span class="ws">            </span>loader,</pre>
<pre class="line before"><span class="ws">            </span>construction_args=creation_params,</pre>
<pre class="line current"><span class="ws">            </span>query_args=query_params) as stuff:</pre>
<pre class="line after"><span class="ws">        </span>index, data = stuff</pre>
<pre class="line after"><span class="ws">        </span>x_start, x_end = _slice_params(img.shape[0], patch_size)</pre>
<pre class="line after"><span class="ws">        </span>y_start, y_end = _slice_params(img.shape[1], patch_size)</pre>
<pre class="line after"><span class="ws">        </span>img = img[x_start:x_end, y_start:y_end, :]</pre>
<pre class="line after"><span class="ws">        </span>return make_mosaic(index, img, patch_size, data)</pre></div>
</div>

<li><div class="frame" id="frame-139952176314240">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/contextlib.py"</cite>,
      line <em class="line">82</em>,
      in <code class="function">__enter__</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span># called</pre>
<pre class="line before"><span class="ws">        </span>return self.__class__(self.func, self.args, self.kwds)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __enter__(self):</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line current"><span class="ws">            </span>return next(self.gen)</pre>
<pre class="line after"><span class="ws">        </span>except StopIteration:</pre>
<pre class="line after"><span class="ws">            </span>raise RuntimeError(&quot;generator didn't yield&quot;) from None</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __exit__(self, type, value, traceback):</pre>
<pre class="line after"><span class="ws">        </span>if type is None:</pre></div>
</div>

<li><div class="frame" id="frame-139952176313848">
  <h4>File <cite class="filename">"/home/pfcm/repos/patchies/patchies/index.py"</cite>,
      line <em class="line">32</em>,
      in <code class="function">img_index</code></h4>
  <div class="source"><pre class="line before"><span class="ws">    </span>index = nmslib.init(</pre>
<pre class="line before"><span class="ws">        </span>method=method,</pre>
<pre class="line before"><span class="ws">        </span>space=space,</pre>
<pre class="line before"><span class="ws">        </span>data_type=data_type,</pre>
<pre class="line before"><span class="ws">        </span>dtype=nmslib.DistType.FLOAT)</pre>
<pre class="line current"><span class="ws">    </span>data = dataset_getter(os.path.dirname(index_path))</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>if os.path.exists(index_path):</pre>
<pre class="line after"><span class="ws">        </span>logging.info('found existing index %s', index_path)</pre>
<pre class="line after"><span class="ws">        </span>input_data = data.astype(np.float32) / 127.0 - 1</pre>
<pre class="line after"><span class="ws">        </span>index.addDataPointBatch(input_data)</pre></div>
</div>

<li><div class="frame" id="frame-139952176314016">
  <h4>File <cite class="filename">"/home/pfcm/repos/patchies/patchies/pipeline.py"</cite>,
      line <em class="line">61</em>,
      in <code class="function">cats</code></h4>
  <div class="source"><pre class="line before"><span class="ws">        </span>with multiprocessing.Pool(multiprocessing.cpu_count()) as pool:</pre>
<pre class="line before"><span class="ws">            </span>processor = partial(</pre>
<pre class="line before"><span class="ws">                </span>process_cat, final_shape=(patch_size, patch_size))</pre>
<pre class="line before"><span class="ws">            </span>ims = np.stack(</pre>
<pre class="line before"><span class="ws">                </span>chain.from_iterable(</pre>
<pre class="line current"><span class="ws">                    </span>pool.imap(processor, _count_loader(fnames), 100)))</pre>
<pre class="line after"><span class="ws">        </span>np.save(datafile, ims)</pre>
<pre class="line after"><span class="ws">    </span>else:</pre>
<pre class="line after"><span class="ws">        </span>logging.info('found preprocessed cats')</pre>
<pre class="line after"><span class="ws">        </span>ims = np.load(datafile)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-139952176313960">
  <h4>File <cite class="filename">"/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/numpy/core/shape_base.py"</cite>,
      line <em class="line">349</em>,
      in <code class="function">stack</code></h4>
  <div class="source"><pre class="line before"><span class="ws">           </span>[3, 4]])</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">    </span>arrays = [asanyarray(arr) for arr in arrays]</pre>
<pre class="line before"><span class="ws">    </span>if not arrays:</pre>
<pre class="line current"><span class="ws">        </span>raise ValueError('need at least one array to stack')</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>shapes = set(arr.shape for arr in arrays)</pre>
<pre class="line after"><span class="ws">    </span>if len(shapes) != 1:</pre>
<pre class="line after"><span class="ws">        </span>raise ValueError('all input arrays must have the same shape')</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>ValueError: need at least one array to stack</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py&quot;, line 1997, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py&quot;, line 1985, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py&quot;, line 1540, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/_compat.py&quot;, line 33, in reraise
    raise value
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py&quot;, line 1982, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py&quot;, line 1614, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py&quot;, line 1517, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/_compat.py&quot;, line 33, in reraise
    raise value
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py&quot;, line 1612, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py&quot;, line 1598, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/home/pfcm/repos/patch-web/patchserver/main.py&quot;, line 75, in process
    img = catsup(img, patch_size)
  File &quot;/home/pfcm/repos/patch-web/patchserver/main.py&quot;, line 50, in catsup
    query_args=query_params) as stuff:
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/contextlib.py&quot;, line 82, in __enter__
    return next(self.gen)
  File &quot;/home/pfcm/repos/patchies/patchies/index.py&quot;, line 32, in img_index
    data = dataset_getter(os.path.dirname(index_path))
  File &quot;/home/pfcm/repos/patchies/patchies/pipeline.py&quot;, line 61, in cats
    pool.imap(processor, _count_loader(fnames), 100)))
  File &quot;/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/numpy/core/shape_base.py&quot;, line 349, in stack
    raise ValueError('need at least one array to stack')
ValueError: need at least one array to stack</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py", line 1997, in __call__
    return self.wsgi_app(environ, start_response)
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py", line 1985, in wsgi_app
    response = self.handle_exception(e)
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py", line 1540, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py", line 1982, in wsgi_app
    response = self.full_dispatch_request()
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py", line 1614, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py", line 1517, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/_compat.py", line 33, in reraise
    raise value
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py", line 1612, in full_dispatch_request
    rv = self.dispatch_request()
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/flask/app.py", line 1598, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/home/pfcm/repos/patch-web/patchserver/main.py", line 75, in process
    img = catsup(img, patch_size)
  File "/home/pfcm/repos/patch-web/patchserver/main.py", line 50, in catsup
    query_args=query_params) as stuff:
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/contextlib.py", line 82, in __enter__
    return next(self.gen)
  File "/home/pfcm/repos/patchies/patchies/index.py", line 32, in img_index
    data = dataset_getter(os.path.dirname(index_path))
  File "/home/pfcm/repos/patchies/patchies/pipeline.py", line 61, in cats
    pool.imap(processor, _count_loader(fnames), 100)))
  File "/home/pfcm/.pyenv/versions/3.6.1/lib/python3.6/site-packages/numpy/core/shape_base.py", line 349, in stack
    raise ValueError('need at least one array to stack')
ValueError: need at least one array to stack

-->
